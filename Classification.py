# -*- coding: utf-8 -*-
"""Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15Rgq_FcZ75bjWnqvg_DtvB1EaTUH9yn3
"""

import seaborn as sn
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn import metrics
import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns

"""## Mount & Read File From Drive

Bisa dirubah jika tidak ingin membaca file dari drive dengan :


dataset = pd.read_csv("path or filename(jika dalam satu folder)")
"""

from google.colab import drive 
drive.mount('/content/gdrive')
dataset = pd.read_csv("gdrive/My Drive/Colab Notebooks/Dataset.csv")
dataset2 = dataset.copy()

"""## **Data Exploration**"""

data = dataset[['skill_dribbling','skill_curve','skill_ball_control','height_cm','weight_kg','age','power_strength','skill_moves']]

data.head()

"""1. Melihat dimensi data"""

data.shape

"""2. Melihat tipe data dari masing-masing kolom"""

data.dtypes

"""3. Missing Value"""

data.describe()

print(data.isnull().sum())

"""tidak ada missing value

4. Outlier
"""

mpl.rcParams['figure.dpi'] = 150
plt.figure(figsize=(60, 60))
f, axes = plt.subplots(1, 9)
sns.boxplot(y=data["skill_dribbling"], ax=axes[0])
sns.boxplot(y=data["skill_curve"], ax=axes[1])
sns.boxplot(y=data["skill_ball_control"], ax=axes[2])
sns.boxplot(y=data["skill_moves"], ax=axes[3])
sns.boxplot(y=dataset2["skill_moves"], ax=axes[4])
sns.boxplot(y=dataset2["age"], ax=axes[5])
sns.boxplot(y=dataset2["weight_kg"], ax=axes[6])
sns.boxplot(y=dataset2["height_cm"], ax=axes[7])
sns.boxplot(y=dataset2["power_strength"], ax=axes[8])
plt.subplots_adjust(wspace=10)

"""outlier ada, tapi masih termasuk data yang wajar. nilai outlier diambil dari quartil, tapi bukan berarti data yang termasuk outlier itu tidak mungkin.

5. Distribusi data pada kolom *skill_moves*
"""

dataset.groupby('skill_moves').size()

"""6. Korelasi antar fitur"""

# %matplotlib inline  

mpl.rcParams['figure.dpi'] = 80
corr = dataset.select_dtypes(include = ['int64']).iloc[:, :].corr()
plt.figure(figsize=(10, 10))
ax = sns.heatmap(corr, vmax=1, square=True)
# ax.set_xticklabels(rotation=30)
plt.xticks(rotation=90)
plt.yticks(rotation=0)

"""## **Data Preparation**

1. Memilih kolom yang akan digunakan berdasarkan heatmap

yang memiliki korelasi tinggi dengan kolom skill_moves
"""

dataset = data[['skill_dribbling','skill_curve','skill_ball_control','skill_moves']]

"""2. memisahkan kolom "skill_moves" (label) dari fitur-fitur yang lain"""

#skill_moves sbg label
label = dataset['skill_moves'].tolist()
dataset = dataset.drop(columns=['skill_moves'])
# print(dataset)

"""3. Split data train & data test

dengan porsi Train 70% Test 30%
"""

x_train, x_test, y_train, y_test = train_test_split(dataset, label, test_size=0.3, random_state = 0)

"""## **Pemodelan**

proses pembentukan model dengan metode Naive bayes
"""

model = GaussianNB()
model.fit(x_train,y_train)

y_predict = model.predict(x_test)

# print(y_predict)
y_predict

"""## **EVALUASI**

Confusion Matrix
"""

y_actu = pd.Series(y_test, name='Actual')
y_pred = pd.Series(y_predict, name='Predicted')
df_confusion = pd.crosstab(y_actu, y_pred)

df_confusion

"""Akurasi"""

print("Akurasi Model : ",metrics.accuracy_score(y_test,y_predict))